if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_COMPILER_GCC)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_COMPILER_CLANG)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_COMPILER_MSVC)
else()
    message(WARNING "Using an untested compiler '${CMAKE_CXX_COMPILER_ID}'. "
        "Consider using GCC, Clang or MSVC.")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_COMPILER_UNKNOWN)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_OS_WINDOWS _CRT_SECURE_NO_WARNINGS NOMINMAX)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_OS_LINUX)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_OS_FREEBSD)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    list(APPEND NTSHENGN_COMMON_DEFINES NTSHENGN_OS_MACOS)
endif()

set(NTSHENGN_DEFINES ${NTSHENGN_COMMON_DEFINES} PARENT_SCOPE)

add_library(Common INTERFACE)
target_include_directories(Common INTERFACE asset_manager)
target_include_directories(Common INTERFACE command_line)
target_include_directories(Common INTERFACE ecs)
target_include_directories(Common INTERFACE frame_limiter)
target_include_directories(Common INTERFACE job_system)
target_include_directories(Common INTERFACE modules)
target_include_directories(Common INTERFACE networking)
target_include_directories(Common INTERFACE profiler)
target_include_directories(Common INTERFACE resources)
target_include_directories(Common INTERFACE scene_manager)
target_include_directories(Common INTERFACE script)
target_include_directories(Common INTERFACE utils)
add_library(NutshellEngine::Common ALIAS Common)